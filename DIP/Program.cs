namespace DIP
{
    /// <summary>
    /// 1 细节与抽象：类 与 接口/抽象类
    /// 2 依赖倒置原则（Dependence Inversion Principle）
    /// 3 依赖倒置的使用
    ///
    /// 控制反转IOC, 依赖注入DI专题
    /// 框架必用+Core内置
    /// 什么是IOC？
    ///
    /// DIP----IOC核心理论
    /// IOC容器使用解析
    /// 手写IOC容器，进阶实现，升级项目
    ///
    /// 设计模式：解决具体问题的套路
    /// 设计模式六大原则：指导设计模式的，不是具体的套路，是一个建议
    /// 之依赖倒置原则
    /// 单一职责
    /// 里氏替换
    /// 依赖倒置原则
    /// 接口隔离原则
    /// 迪米特法则
    /// 开闭原则
    ///
    ///抽象：接口 & 抽象类，包含未确定的元素
    /// 细节：普通类，全部的元素都是确定的
    /// 依赖倒置原则:程序设计时，高层模块不要依赖于底层模块，二者应该通过抽象来依赖----依赖抽象，而不是依赖细节
    /// </summary>
    internal class Program
    {
        public static void Main(string[] args)
        {
        }
    }
}